#ifndef DP_REPORTS_CATEGORY_H
#define DP_REPORTS_CATEGORY_H
// ---------------------------------------------------------------------------------
#include <libdontpanic/defines.hpp>
#include <libdontpanic/uuid.h>
#include <libdontpanic/action.hpp>
#include <libdontpanic/time.hpp>
// ---------------------------------------------------------------------------------
namespace dp
{
  // ---------------------------------------------------------------------------------
  namespace reports
  {
    namespace grouping
    {
      // ---------------------------------------------------------------------------------
      class category
      {
        public:
          category();
          category ( category *embed );
          virtual ~category();
        public:
          // ---------------------------------------------------------------------------------
          virtual bool matches ( Action const& a ) const = 0;
          // ---------------------------------------------------------------------------------
          virtual void embed ( category *cat );
          // ---------------------------------------------------------------------------------
        protected:
          category *embedded;
      };
      // ---------------------------------------------------------------------------------
      class null: public category
      {
        public:
          null() : category ( 0 ) {}
        public:
          bool matches ( Action const& a ) const
          {
            if ( embedded == 0 ) return true;
            return embedded->matches ( a );
          }
      };
      // ---------------------------------------------------------------------------------
      class no: public category
      {
        public:
          no() : category ( 0 ) {}
        public:
          bool matches ( Action const& a ) const
          {
            return false;
          }
      };
      // ---------------------------------------------------------------------------------
      class task
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          task ( Uuid const& t )
              : _M_task ( t ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            if ( a.task() != _M_task ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          Uuid _M_task;
      };
      // ---------------------------------------------------------------------------------
      class project
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          project ( Uuid const& p )
              : _M_project ( p ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            if ( a.project() != _M_project ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          Uuid _M_project;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
      class daily
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          // ---------------------------------------------------------------------------------
          daily ( QDate const& d )
              : _M_date ( d ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            if ( a.startTime().date() != _M_date ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          // ---------------------------------------------------------------------------------
          QDate _M_date;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
      class weekly
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          // ---------------------------------------------------------------------------------
          weekly ( int week, int year )
              : _M_week ( week )
              , _M_year ( year ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            QDate const& d = a.startTime().date();
            int year;
            int week = d.weekNumber ( &year );
            if ( year != _M_year || week !=  _M_week ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          // ---------------------------------------------------------------------------------
          int _M_week;
          int _M_year;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
      class monthly
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          // ---------------------------------------------------------------------------------
          monthly ( int month, int year )
              : _M_month ( month )
              , _M_year ( year ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            QDate const& d = a.startTime().date();
            if ( d.year() != _M_year || d.month() !=  _M_month ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          // ---------------------------------------------------------------------------------
          int _M_month;
          int _M_year;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
      class quarterly
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          // ---------------------------------------------------------------------------------
          quarterly ( int quarter, int year )
              : _M_quarter ( quarter )
              , _M_year ( year ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            QDate const& d = a.startTime().date();
            if ( d.year() != _M_year || time::quarter ( d ) !=  _M_quarter ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          // ---------------------------------------------------------------------------------
          int _M_quarter;
          int _M_year;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
      class yearly
            : public category
      {
          // ---------------------------------------------------------------------------------
        public:
          // ---------------------------------------------------------------------------------
          yearly ( int year )
              : _M_year ( year ) {}
          // ---------------------------------------------------------------------------------
          bool matches ( Action const&a ) const
          {
            QDate const& d = a.startTime().date();
            if ( d.year() != _M_year ) {return false;}
            return embedded->matches ( a );
          }
          // ---------------------------------------------------------------------------------
        private:
          // ---------------------------------------------------------------------------------
          int _M_year;
          // ---------------------------------------------------------------------------------
      };
      // ---------------------------------------------------------------------------------
    }
  }
  // ---------------------------------------------------------------------------------
}
// ---------------------------------------------------------------------------------
#endif //DP_REPORTS_CATEGORY_H
