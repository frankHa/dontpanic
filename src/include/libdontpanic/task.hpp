#ifndef LIBDONTPANICTASK_HPP
#define LIBDONTPANICTASK_HPP
// ---------------------------------------------------------------------------------
#include "defines.hpp"
#include <QString>
#include <QDateTime>
#include <QUuid>
// ---------------------------------------------------------------------------------
class QDBusArgument;
// ---------------------------------------------------------------------------------
namespace dp
{
// ---------------------------------------------------------------------------------
  class DP_EXPORT Task
  {
      // ---------------------------------------------------------------------------------
      friend QDBusArgument const& operator >> ( QDBusArgument const&arg, dp::Task & task );
      // ---------------------------------------------------------------------------------
    public:
      // ---------------------------------------------------------------------------------
      TYPE ( Task );
      // ---------------------------------------------------------------------------------
      ///ctor
      Task();
      // ---------------------------------------------------------------------------------
      Task(QString const& name);
      // ---------------------------------------------------------------------------------
      Task ( QUuid const& id );
      // ---------------------------------------------------------------------------------
    public:
      // ---------------------------------------------------------------------------------
      QUuid const& id() const;
      // ---------------------------------------------------------------------------------
      QString const& name() const;
      // ---------------------------------------------------------------------------------
      Task& setName ( QString name );
      // ---------------------------------------------------------------------------------
      bool isSoloEffort() const;
      // ---------------------------------------------------------------------------------
      Task& setIsSoloEffort ( bool s );
      // ---------------------------------------------------------------------------------
      bool isChargeable() const;
      // ---------------------------------------------------------------------------------
      Task& setIsChargeable ( bool c );
      // ---------------------------------------------------------------------------------
      QDateTime const& creationDate() const;
      // ---------------------------------------------------------------------------------
      Task& setCreationDate ( QDateTime date );
      // ---------------------------------------------------------------------------------
    private:
      // ---------------------------------------------------------------------------------
      QUuid  _M_id;
      // ---------------------------------------------------------------------------------
      QString _M_name;
      // ---------------------------------------------------------------------------------
      bool _M_solo_effort;
      // ---------------------------------------------------------------------------------
      bool _M_chargeable;
      // ---------------------------------------------------------------------------------
      QDateTime _M_creation_date;
      // ---------------------------------------------------------------------------------
      //TODO? Modification date
      // ---------------------------------------------------------------------------------
  };
  typedef QList<Task> TaskList;
  // ---------------------------------------------------------------------------------
  DECLARE_SMARTPOINTERS ( Task );
  // ---------------------------------------------------------------------------------
  class DP_EXPORT NullTask: public Task
  {
    public:
      // ---------------------------------------------------------------------------------
      NullTask() : Task ( QUuid() ) {}
      // ---------------------------------------------------------------------------------
  };
  // ---------------------------------------------------------------------------------
  bool DP_EXPORT operator == (dp::Task const& lhs, dp::Task const& rhs);
  // ---------------------------------------------------------------------------------
  template<typename ostream>
  ostream & operator<<(ostream &out, dp::Task const& t)
  {
    out<<"Task: "<<t.id().toString()<<", name: "<<t.name();
    return out;
  }
  // ---------------------------------------------------------------------------------
}//dp
// ---------------------------------------------------------------------------------
#endif //LIBDONTPANICTASK_HPP

