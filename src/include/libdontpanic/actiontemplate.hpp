#ifndef DONTPANICLIB_ACTIONTEMPLATE_HPP
#define DONTPANICLIB_ACTIONTEMPLATE_HPP
// ---------------------------------------------------------------------------------
#include "defines.hpp"
#include "task.hpp"
#include "project.hpp"
#include <QUuid>
// ---------------------------------------------------------------------------------
namespace dp
{
  // ---------------------------------------------------------------------------------
  class ActionTemplate
  {
      // ---------------------------------------------------------------------------------
      friend QDBusArgument const& operator >> ( QDBusArgument const&arg, ActionTemplate & at );
      // ---------------------------------------------------------------------------------
    public:
      // ---------------------------------------------------------------------------------
      TYPE ( ActionTemplate );
      // ---------------------------------------------------------------------------------
      ///ctor:
      // ---------------------------------------------------------------------------------
      ActionTemplate();
      // ---------------------------------------------------------------------------------
      ActionTemplate(QString const& name);
      // ---------------------------------------------------------------------------------
      ActionTemplate(QUuid const& id);
      // ---------------------------------------------------------------------------------
    public:
      // ---------------------------------------------------------------------------------
      QUuid id() const;
      // ---------------------------------------------------------------------------------
      QUuid task() const;
      // ---------------------------------------------------------------------------------
      void setTask ( QUuid );
      // ---------------------------------------------------------------------------------
      QUuid project() const;
      // ---------------------------------------------------------------------------------
      void setProject ( QUuid );
      // ---------------------------------------------------------------------------------
      QUuid collaborationType() const;
      // ---------------------------------------------------------------------------------
      void setCollaborationType ( QUuid );
      // ---------------------------------------------------------------------------------
      QString name() const;
      // ---------------------------------------------------------------------------------
      void setName ( QString name );
      // ---------------------------------------------------------------------------------
      QString comment() const;
      // ---------------------------------------------------------------------------------
      void setComment ( QString comment );
      // ---------------------------------------------------------------------------------
    private:
      // ---------------------------------------------------------------------------------
      QUuid _M_id;
      // ---------------------------------------------------------------------------------
      QUuid _M_task;
      // ---------------------------------------------------------------------------------
      QUuid _M_project;
      // ---------------------------------------------------------------------------------
      QString _M_teamwork;
      // ---------------------------------------------------------------------------------
      //TODO person list
      // ---------------------------------------------------------------------------------
      QString _M_name;
      // ---------------------------------------------------------------------------------
      QString _M_comment;
      // ---------------------------------------------------------------------------------
      //TODO shortcut
      // ---------------------------------------------------------------------------------
  };
  // ---------------------------------------------------------------------------------
  typedef QList<ActionTemplate> TemplateList;
  // ---------------------------------------------------------------------------------
  DECLARE_SMARTPOINTERS ( ActionTemplate );
  // ---------------------------------------------------------------------------------
  class DP_EXPORT NullActionTemplate: public ActionTemplate
  {
    public:
      // ---------------------------------------------------------------------------------
      NullActionTemplate() : ActionTemplate ( QUuid() ) {}
      // ---------------------------------------------------------------------------------
  };
  // ---------------------------------------------------------------------------------
  bool DP_EXPORT operator == (dp::ActionTemplate const& lhs, dp::ActionTemplate const& rhs);
  // ---------------------------------------------------------------------------------
  template<typename ostream>
  ostream & operator<<(ostream &out, dp::ActionTemplate const& t)
  {
    out<<"Template: "<<t.id().toString()<<", name: "<<t.name();
    return out;
  }
  // ---------------------------------------------------------------------------------
}//dp
// ---------------------------------------------------------------------------------
#endif //DONTPANICLIB_ACTIONTEMPLATE_HPP
